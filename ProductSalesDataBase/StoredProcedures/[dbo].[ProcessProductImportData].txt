SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ProcessProductImportData]
    @ImportSessionID UNIQUEIDENTIFIER,
    @ImportData NVARCHAR(MAX) -- JSON array of products from uploaded file
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Clear any existing staging data for this session
    DELETE FROM ProductImportStaging WHERE ImportSessionID = @ImportSessionID;
    
    -- Parse JSON and insert into staging table with operation type detection
    INSERT INTO ProductImportStaging (
        ImportSessionID, OperationType, SKU, Name, Category, Price, 
        QuantityInStock, Description, SaleStartDate, ExistingProductID, 
        ValidationErrors, RowNumber
    )
    SELECT 
        @ImportSessionID,
        CASE 
            WHEN p.ProductID IS NOT NULL THEN 'Update'
            ELSE 'Insert'
        END as OperationType,
        j.SKU,
        j.Name,
        j.Category,
        j.Price,
        j.QuantityInStock,
        j.Description,
        CASE 
            WHEN j.SaleStartDate IS NOT NULL AND j.SaleStartDate != '' 
            THEN TRY_CAST(j.SaleStartDate AS DATETIME)
            ELSE NULL 
        END as SaleStartDate,
        p.ProductID as ExistingProductID,
        CASE 
            WHEN j.Name IS NULL OR j.Name = '' THEN '"Name is required"'
            WHEN j.Price IS NULL OR TRY_CAST(j.Price AS DECIMAL(18,2)) IS NULL THEN '"Invalid price format"'
            WHEN j.QuantityInStock IS NULL OR TRY_CAST(j.QuantityInStock AS INT) IS NULL THEN '"Invalid stock quantity"'
            WHEN j.SKU IS NOT NULL AND j.SKU != '' AND EXISTS(
                SELECT 1 FROM Products p2 
                WHERE p2.SKU = j.SKU AND (p.ProductID IS NULL OR p2.ProductID != p.ProductID)
            ) THEN '"SKU already exists for different product"'
            ELSE NULL
        END as ValidationErrors,
        j.RowNumber
    FROM OPENJSON(@ImportData) WITH (
        SKU NVARCHAR(100) '$.sku',
        Name NVARCHAR(200) '$.name',
        Category NVARCHAR(100) '$.category', 
        Price NVARCHAR(50) '$.price',
        QuantityInStock NVARCHAR(50) '$.quantityInStock',
        Description NVARCHAR(MAX) '$.description',
        SaleStartDate NVARCHAR(50) '$.saleStartDate',
        RowNumber INT '$.rowNumber'
    ) j
    LEFT JOIN Products p ON (
        (j.SKU IS NOT NULL AND j.SKU != '' AND p.SKU = j.SKU) OR
        (j.SKU IS NULL OR j.SKU = '') AND p.Name = j.Name
    );
    
    -- Return summary of what will be processed
    SELECT 
        COUNT(*) as TotalRows,
        SUM(CASE WHEN OperationType = 'Insert' THEN 1 ELSE 0 END) as NewProducts,
        SUM(CASE WHEN OperationType = 'Update' THEN 1 ELSE 0 END) as UpdatedProducts,
        SUM(CASE WHEN ValidationErrors IS NOT NULL THEN 1 ELSE 0 END) as ErrorRows
    FROM ProductImportStaging 
    WHERE ImportSessionID = @ImportSessionID;
END
GO
