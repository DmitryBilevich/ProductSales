SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Stored Procedure: MergeProductJson
-- Description: Create or Update product with JSON input and JSON output
-- =============================================

CREATE   PROCEDURE [dbo].[MergeProductJson]
    @JsonInput NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        BEGIN TRANSACTION;
        
        -- Parse JSON input parameters
        DECLARE @ProductID INT = TRY_CAST(JSON_VALUE(@JsonInput, '$.productID') AS INT)
        DECLARE @SKU NVARCHAR(100) = JSON_VALUE(@JsonInput, '$.sku')
        DECLARE @Name NVARCHAR(255) = JSON_VALUE(@JsonInput, '$.name')
        DECLARE @Category NVARCHAR(100) = JSON_VALUE(@JsonInput, '$.category')
        DECLARE @Price DECIMAL(10,2) = TRY_CAST(JSON_VALUE(@JsonInput, '$.price') AS DECIMAL(10,2))
        DECLARE @QuantityInStock INT = TRY_CAST(JSON_VALUE(@JsonInput, '$.quantityInStock') AS INT)
        DECLARE @Description NVARCHAR(MAX) = JSON_VALUE(@JsonInput, '$.description')
        DECLARE @SaleStartDate DATETIME2 = TRY_CAST(JSON_VALUE(@JsonInput, '$.saleStartDate') AS DATETIME2)
        DECLARE @OperationType NVARCHAR(10) = JSON_VALUE(@JsonInput, '$.operationType')
        
        DECLARE @ResultProductID INT
        DECLARE @IsUpdate BIT = 0
        
        -- Validate required fields
        IF @SKU IS NULL OR @SKU = '' OR @Name IS NULL OR @Name = ''
        BEGIN
            SELECT (
                SELECT 
                    0 as success,
                    'SKU and Name are required' as message,
                    NULL as productID
                FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
            ) as JsonResult
            RETURN
        END
        
        -- Check if product exists
        IF @ProductID > 0 AND EXISTS(SELECT 1 FROM Products WHERE ProductID = @ProductID)
        BEGIN
            SET @IsUpdate = 1
            SET @ResultProductID = @ProductID
            
            -- Update existing product
            UPDATE Products 
            SET 
                SKU = @SKU,
                Name = @Name,
                Category = @Category,
                Price = @Price,
                QuantityInStock = @QuantityInStock,
                Description = @Description,
                SaleStartDate = @SaleStartDate
            WHERE ProductID = @ProductID
        END
        ELSE
        BEGIN
            -- Check for SKU uniqueness (exclude current product if updating)
            IF EXISTS(SELECT 1 FROM Products WHERE SKU = @SKU AND (@ProductID IS NULL OR ProductID != @ProductID))
            BEGIN
                SELECT (
                    SELECT 
                        0 as success,
                        'SKU already exists' as message,
                        NULL as productID
                    FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
                ) as JsonResult
                RETURN
            END
            
            -- Insert new product
            INSERT INTO Products (SKU, Name, Category, Price, QuantityInStock, Description, SaleStartDate, CreatedAt)
            VALUES (@SKU, @Name, @Category, @Price, @QuantityInStock, @Description, @SaleStartDate, GETUTCDATE())
            
            SET @ResultProductID = SCOPE_IDENTITY()
        END
        
        -- Handle images if provided
        IF JSON_QUERY(@JsonInput, '$.images') IS NOT NULL
        BEGIN
            -- Delete existing images for this product
            DELETE FROM ProductImages WHERE ProductID = @ResultProductID
            
            -- Insert new images with base64 data
            BEGIN TRY
                INSERT INTO ProductImages (ProductID, FileName, ImageData, ContentType, ImageOrder, UploadedAt)
                SELECT 
    @ResultProductID,
    fileName,
    imageData,
    ISNULL(contentType, 'image/jpeg'),
    ISNULL([order], 0),
    GETUTCDATE()
FROM OPENJSON(@JsonInput, '$.images')
WITH (
    fileName NVARCHAR(255),
    imageData NVARCHAR(MAX),
    contentType NVARCHAR(100),
    [order] INT
)
WHERE imageData IS NOT NULL AND imageData <> ''
                  
                -- Log success
                DECLARE @InsertCount INT = @@ROWCOUNT
                IF @InsertCount > 0
                    PRINT 'Successfully inserted ' + CAST(@InsertCount AS NVARCHAR(10)) + ' images'
                ELSE
                    PRINT 'No images were inserted - check WHERE conditions'
                    
            END TRY
            BEGIN CATCH
                -- Log the error details
                DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
                DECLARE @ErrorSeverity INT = ERROR_SEVERITY()
                DECLARE @ErrorState INT = ERROR_STATE()
                PRINT 'Error inserting images: ' + @ErrorMessage
                -- Re-throw the error to fail the transaction
                RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
            END CATCH
        END
        
        COMMIT TRANSACTION;
        
        -- Return success response with product data
        SELECT (
            SELECT 
                1 as success,
                CASE WHEN @IsUpdate = 1 THEN 'Product updated successfully' ELSE 'Product created successfully' END as message,
                @ResultProductID as productID,
                (
                    SELECT 
                        p.ProductID as productID,
                        p.SKU as sku,
                        p.Name as name,
                        p.Category as category,
                        p.Price as price,
                        p.QuantityInStock as quantityInStock,
                        p.Description as description,
                        p.SaleStartDate as saleStartDate,
                        p.CreatedAt as createdAt,
                        (
                            SELECT 
                                img.ImageID as imageID,
                                img.FileName as fileName,
                                img.ImageData as imageData,
                                img.ContentType as contentType,
                                img.ImageOrder as [order]
                            FROM ProductImages img
                            WHERE img.ProductID = p.ProductID
                            ORDER BY img.ImageOrder
                            FOR JSON PATH
                        ) as images
                    FROM Products p
                    WHERE p.ProductID = @ResultProductID
                    FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
                ) as product
            FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        ) as JsonResult
        
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
            
        -- Return error response
        SELECT (
            SELECT 
                0 as success,
                ERROR_MESSAGE() as message,
                NULL as productID,
                NULL as product
            FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        ) as JsonResult
    END CATCH
END
GO
