SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Stored Procedure: GetProductsJson (Static SQL Version)
-- Description: Search products with JSON input and JSON output - No Dynamic SQL
-- =============================================

CREATE   PROCEDURE [dbo].[GetProductsJson]
    @JsonInput NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Parse JSON input parameters
    DECLARE @Name NVARCHAR(255) = JSON_VALUE(@JsonInput, '$.name')
    DECLARE @Sku NVARCHAR(100) = JSON_VALUE(@JsonInput, '$.sku')
    DECLARE @NameOrSku NVARCHAR(255) = JSON_VALUE(@JsonInput, '$.nameOrSku')
    DECLARE @PriceMin DECIMAL(10,2) = TRY_CAST(JSON_VALUE(@JsonInput, '$.priceMin') AS DECIMAL(10,2))
    DECLARE @PriceMax DECIMAL(10,2) = TRY_CAST(JSON_VALUE(@JsonInput, '$.priceMax') AS DECIMAL(10,2))
    DECLARE @StockMin INT = TRY_CAST(JSON_VALUE(@JsonInput, '$.stockMin') AS INT)
    DECLARE @StockMax INT = TRY_CAST(JSON_VALUE(@JsonInput, '$.stockMax') AS INT)
    DECLARE @SaleStartDateMin DATETIME2 = TRY_CAST(JSON_VALUE(@JsonInput, '$.saleStartDateMin') AS DATETIME2)
    DECLARE @SaleStartDateMax DATETIME2 = TRY_CAST(JSON_VALUE(@JsonInput, '$.saleStartDateMax') AS DATETIME2)
    DECLARE @PageNumber INT = ISNULL(TRY_CAST(JSON_VALUE(@JsonInput, '$.pageNumber') AS INT), 1)
    DECLARE @PageSize INT = ISNULL(TRY_CAST(JSON_VALUE(@JsonInput, '$.pageSize') AS INT), 10)
    DECLARE @SortField NVARCHAR(50) = ISNULL(JSON_VALUE(@JsonInput, '$.sortField'), 'productID')
    DECLARE @SortOrder INT = ISNULL(TRY_CAST(JSON_VALUE(@JsonInput, '$.sortOrder') AS INT), 1)

    -- Parse categories array from JSON into temp table
    CREATE TABLE #Categories (Category NVARCHAR(100))
    INSERT INTO #Categories (Category)
    SELECT value
    FROM OPENJSON(@JsonInput, '$.categories')

    -- Parse stock ranges array from JSON into temp table
    CREATE TABLE #StockRanges (MinStock INT, MaxStock INT)
    INSERT INTO #StockRanges (MinStock, MaxStock)
    SELECT 
        TRY_CAST(JSON_VALUE(value, '$.minStock') AS INT),
        TRY_CAST(JSON_VALUE(value, '$.maxStock') AS INT)
    FROM OPENJSON(@JsonInput, '$.stockRanges')

    -- Calculate offset for pagination
    DECLARE @Offset INT = (@PageNumber - 1) * @PageSize

    -- Get total count with static SQL
    DECLARE @TotalCount INT
    SELECT @TotalCount = COUNT(*)
    FROM Products p
    WHERE 1=1
        AND (@Name IS NULL OR @Name = '' OR p.Name LIKE '%' + @Name + '%')
        AND (@Sku IS NULL OR @Sku = '' OR p.SKU LIKE '%' + @Sku + '%')
        AND (@NameOrSku IS NULL OR @NameOrSku = '' OR p.Name LIKE '%' + @NameOrSku + '%' OR p.SKU LIKE '%' + @NameOrSku + '%')
        AND (NOT EXISTS(SELECT 1 FROM #Categories) OR p.Category IN (SELECT Category FROM #Categories))
        AND (@PriceMin IS NULL OR p.Price >= @PriceMin)
        AND (@PriceMax IS NULL OR p.Price <= @PriceMax)
        AND (@StockMin IS NULL OR p.QuantityInStock >= @StockMin)
        AND (@StockMax IS NULL OR p.QuantityInStock <= @StockMax)
        AND (@SaleStartDateMin IS NULL OR p.SaleStartDate >= @SaleStartDateMin)
        AND (@SaleStartDateMax IS NULL OR p.SaleStartDate <= @SaleStartDateMax)
        AND (NOT EXISTS(SELECT 1 FROM #StockRanges) OR 
             EXISTS(SELECT 1 FROM #StockRanges sr WHERE 
                p.QuantityInStock >= ISNULL(sr.MinStock, 0) AND 
                (sr.MaxStock IS NULL OR p.QuantityInStock <= sr.MaxStock)))

    -- Get paginated results with JSON output - Static SQL with CASE for sorting
    SELECT (
        SELECT 
            (
                SELECT 
                    p.ProductID as productID,
                    p.SKU as sku,
                    p.Name as name,
                    p.Category as category,
                    p.Price as price,
                    p.QuantityInStock as quantityInStock,
                    p.Description as description,
                    p.SaleStartDate as saleStartDate,
                    p.CreatedAt as createdAt,
                    (
                        SELECT 
                            img.ImageID as imageID,
                            img.FileName as fileName,
                            img.ImageData as imageData,
                            img.ContentType as contentType,
                            img.ImageOrder as [order]
                        FROM ProductImages img
                        WHERE img.ProductID = p.ProductID
                        ORDER BY img.ImageOrder
                        FOR JSON PATH
                    ) as images
                FROM Products p
                WHERE 1=1
                    AND (@Name IS NULL OR @Name = '' OR p.Name LIKE '%' + @Name + '%')
                    AND (@Sku IS NULL OR @Sku = '' OR p.SKU LIKE '%' + @Sku + '%')
                    AND (@NameOrSku IS NULL OR @NameOrSku = '' OR p.Name LIKE '%' + @NameOrSku + '%' OR p.SKU LIKE '%' + @NameOrSku + '%')
                    AND (NOT EXISTS(SELECT 1 FROM #Categories) OR p.Category IN (SELECT Category FROM #Categories))
                    AND (@PriceMin IS NULL OR p.Price >= @PriceMin)
                    AND (@PriceMax IS NULL OR p.Price <= @PriceMax)
                    AND (@StockMin IS NULL OR p.QuantityInStock >= @StockMin)
                    AND (@StockMax IS NULL OR p.QuantityInStock <= @StockMax)
                    AND (@SaleStartDateMin IS NULL OR p.SaleStartDate >= @SaleStartDateMin)
                    AND (@SaleStartDateMax IS NULL OR p.SaleStartDate <= @SaleStartDateMax)
                    AND (NOT EXISTS(SELECT 1 FROM #StockRanges) OR 
                         EXISTS(SELECT 1 FROM #StockRanges sr WHERE 
                            p.QuantityInStock >= ISNULL(sr.MinStock, 0) AND 
                            (sr.MaxStock IS NULL OR p.QuantityInStock <= sr.MaxStock)))
                ORDER BY 
                    CASE WHEN @SortField = 'productID' AND @SortOrder = 1 THEN p.ProductID END ASC,
                    CASE WHEN @SortField = 'productID' AND @SortOrder = -1 THEN p.ProductID END DESC,
                    CASE WHEN @SortField = 'sku' AND @SortOrder = 1 THEN p.SKU END ASC,
                    CASE WHEN @SortField = 'sku' AND @SortOrder = -1 THEN p.SKU END DESC,
                    CASE WHEN @SortField = 'name' AND @SortOrder = 1 THEN p.Name END ASC,
                    CASE WHEN @SortField = 'name' AND @SortOrder = -1 THEN p.Name END DESC,
                    CASE WHEN @SortField = 'category' AND @SortOrder = 1 THEN p.Category END ASC,
                    CASE WHEN @SortField = 'category' AND @SortOrder = -1 THEN p.Category END DESC,
                    CASE WHEN @SortField = 'price' AND @SortOrder = 1 THEN p.Price END ASC,
                    CASE WHEN @SortField = 'price' AND @SortOrder = -1 THEN p.Price END DESC,
                    CASE WHEN @SortField = 'quantityInStock' AND @SortOrder = 1 THEN p.QuantityInStock END ASC,
                    CASE WHEN @SortField = 'quantityInStock' AND @SortOrder = -1 THEN p.QuantityInStock END DESC,
                    CASE WHEN @SortField = 'Stock' AND @SortOrder = 1 THEN p.QuantityInStock END ASC,
                    CASE WHEN @SortField = 'Stock' AND @SortOrder = -1 THEN p.QuantityInStock END DESC,
                    CASE WHEN @SortField = 'saleStartDate' AND @SortOrder = 1 THEN p.SaleStartDate END ASC,
                    CASE WHEN @SortField = 'saleStartDate' AND @SortOrder = -1 THEN p.SaleStartDate END DESC,
                    p.ProductID ASC -- Default fallback
                OFFSET @Offset ROWS
                FETCH NEXT @PageSize ROWS ONLY
                FOR JSON PATH
            ) as items,
            @TotalCount as totalCount,
            @PageNumber as pageNumber,
            @PageSize as pageSize,
            CEILING(CAST(@TotalCount AS FLOAT) / @PageSize) as totalPages
        FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
    ) as JsonResult

    -- Cleanup temp tables
    DROP TABLE #Categories
    DROP TABLE #StockRanges
END
GO
