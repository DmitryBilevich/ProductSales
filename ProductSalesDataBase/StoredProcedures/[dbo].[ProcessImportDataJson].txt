SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Stored Procedure: ProcessImportDataJson
-- Description: Process import data with JSON input and JSON output
-- =============================================

CREATE   PROCEDURE [dbo].[ProcessImportDataJson]
    @JsonInput NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        BEGIN TRANSACTION;
        
        -- Parse JSON input parameters
        DECLARE @ImportSessionId UNIQUEIDENTIFIER = TRY_CAST(JSON_VALUE(@JsonInput, '$.importSessionId') AS UNIQUEIDENTIFIER)
        
        -- Parse products array from JSON
        DECLARE @ProcessedCount INT = 0
        DECLARE @ErrorCount INT = 0
        
        -- Create temp table for products
        CREATE TABLE #ImportProducts (
            RowNumber INT,
            SKU NVARCHAR(100),
            Name NVARCHAR(255),
            Category NVARCHAR(100),
            Price DECIMAL(10,2),
            QuantityInStock INT,
            Description NVARCHAR(MAX),
            SaleStartDate DATETIME2,
            OperationType NVARCHAR(20),
            ValidationErrors NVARCHAR(MAX)
        )
        
        -- Insert products from JSON into temp table
        INSERT INTO #ImportProducts (RowNumber, SKU, Name, Category, Price, QuantityInStock, Description, SaleStartDate, OperationType)
        SELECT 
            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as RowNumber,
            JSON_VALUE(value, '$.sku'),
            JSON_VALUE(value, '$.name'),
            JSON_VALUE(value, '$.category'),
            TRY_CAST(JSON_VALUE(value, '$.price') AS DECIMAL(10,2)),
            TRY_CAST(JSON_VALUE(value, '$.quantityInStock') AS INT),
            JSON_VALUE(value, '$.description'),
            TRY_CAST(JSON_VALUE(value, '$.saleStartDate') AS DATETIME2),
            ISNULL(JSON_VALUE(value, '$.operationType'), 'Insert')
        FROM OPENJSON(@JsonInput, '$.products')
        
        -- Validate and process each product
        DECLARE @RowNumber INT, @SKU NVARCHAR(100), @Name NVARCHAR(255), @Category NVARCHAR(100)
        DECLARE @Price DECIMAL(10,2), @QuantityInStock INT, @Description NVARCHAR(MAX)
        DECLARE @SaleStartDate DATETIME2, @OperationType NVARCHAR(20)
        DECLARE @ValidationErrors NVARCHAR(MAX)
        
        DECLARE product_cursor CURSOR FOR
        SELECT RowNumber, SKU, Name, Category, Price, QuantityInStock, Description, SaleStartDate, OperationType
        FROM #ImportProducts
        
        OPEN product_cursor
        FETCH NEXT FROM product_cursor INTO 
            @RowNumber, @SKU, @Name, @Category, @Price, @QuantityInStock, @Description, @SaleStartDate, @OperationType
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @ValidationErrors = ''
            
            -- Validate required fields
            IF @SKU IS NULL OR @SKU = ''
                SET @ValidationErrors = @ValidationErrors + 'SKU is required; '
            IF @Name IS NULL OR @Name = ''
                SET @ValidationErrors = @ValidationErrors + 'Name is required; '
            IF @Price IS NULL OR @Price < 0
                SET @ValidationErrors = @ValidationErrors + 'Valid price is required; '
            IF @QuantityInStock IS NULL OR @QuantityInStock < 0
                SET @ValidationErrors = @ValidationErrors + 'Valid quantity is required; '
            
            -- Check for duplicate SKU (exclude current product if updating)
            IF @SKU IS NOT NULL AND EXISTS(
                SELECT 1 FROM Products 
                WHERE SKU = @SKU AND (@OperationType != 'Update' OR ProductID != ISNULL((
                    SELECT ProductID FROM Products WHERE SKU = @SKU
                ), 0))
            )
                SET @ValidationErrors = @ValidationErrors + 'SKU already exists; '
            
            IF @ValidationErrors = ''
            BEGIN
                -- No validation errors, process the product
                IF @OperationType = 'Update' AND EXISTS(SELECT 1 FROM Products WHERE SKU = @SKU)
                BEGIN
                    -- Update existing product
                    UPDATE Products 
                    SET 
                        Name = @Name,
                        Category = @Category,
                        Price = @Price,
                        QuantityInStock = @QuantityInStock,
                        Description = @Description,
                        SaleStartDate = @SaleStartDate
                    WHERE SKU = @SKU
                    
                    SET @ProcessedCount = @ProcessedCount + 1
                END
                ELSE
                BEGIN
                    -- Insert new product
                    INSERT INTO Products (SKU, Name, Category, Price, QuantityInStock, Description, SaleStartDate, CreatedAt)
                    VALUES (@SKU, @Name, @Category, @Price, @QuantityInStock, @Description, @SaleStartDate, GETUTCDATE())
                    
                    SET @ProcessedCount = @ProcessedCount + 1
                END
            END
            ELSE
            BEGIN
                SET @ErrorCount = @ErrorCount + 1
            END
            
            -- Update temp table with validation results
            UPDATE #ImportProducts 
            SET ValidationErrors = CASE WHEN @ValidationErrors = '' THEN NULL ELSE @ValidationErrors END
            WHERE RowNumber = @RowNumber
            
            FETCH NEXT FROM product_cursor INTO 
                @RowNumber, @SKU, @Name, @Category, @Price, @QuantityInStock, @Description, @SaleStartDate, @OperationType
        END
        
        CLOSE product_cursor
        DEALLOCATE product_cursor
        
        COMMIT TRANSACTION;
        
        -- Return success response with processing results
        SELECT (
            SELECT 
                1 as success,
                'Import processing completed' as message,
                @ProcessedCount as processedCount,
                @ErrorCount as errorCount,
                (SELECT COUNT(*) FROM #ImportProducts) as totalRows,
                (
                    SELECT 
                        ip.RowNumber as rowNumber,
                        ip.SKU as sku,
                        ip.Name as name,
                        ip.Category as category,
                        ip.Price as price,
                        ip.QuantityInStock as quantityInStock,
                        ip.Description as description,
                        ip.SaleStartDate as saleStartDate,
                        ip.OperationType as operationType,
                        ip.ValidationErrors as validationErrors
                    FROM #ImportProducts ip
                    ORDER BY ip.RowNumber
                    FOR JSON PATH
                ) as processedItems
            FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        ) as JsonResult
        
        -- Cleanup
        DROP TABLE #ImportProducts
        
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        
        -- Cleanup temp table if exists
        IF OBJECT_ID('tempdb..#ImportProducts') IS NOT NULL
            DROP TABLE #ImportProducts
            
        -- Return error response
        SELECT (
            SELECT 
                0 as success,
                ERROR_MESSAGE() as message,
                0 as processedCount,
                0 as errorCount,
                0 as totalRows,
                NULL as processedItems
            FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
        ) as JsonResult
    END CATCH
END
GO
